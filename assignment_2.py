# -*- coding: utf-8 -*-
"""Assignment 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qNeCqOG1jNFqNZ5kndyrss8O9fcZ7sjK
"""

from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import skew, kurtosis

df = pd.read_csv('https://raw.githubusercontent.com/vipinv69/statistics-and-trends-assignment-/main/climate_change.csv')
t_df = df.transpose().reset_index()
t_df.columns = t_df.iloc[0]
t_df = t_df[1:]
# Transposed DataFrame
t_df.head()

df['Indicator Name'].unique()

# creating 3 dataframes with 3 indicators by subsetting the original dataframe
df_renew = df[df['Indicator Name'] ==
              'Electricity production from coal sources (% of total)']
df_accelec = df[df['Indicator Name'] ==
                'Electricity production from hydroelectric sources (% of total)']
df_popgrow = df[df['Indicator Name'] == 'Electricity production from nuclear sources (% of total)']


# merging the 3 dataframes
df_merge = pd.concat([df_renew, df_accelec, df_popgrow])

# Resetting the index
df_merge.reset_index(inplace=True, drop=True)

# replace '..' values with NaN values in data
df_merge.replace('..', np.nan, inplace=True)
# removing the past 4 years since there is very little data
df_merge = df_merge.iloc[:, :-3]

# replacing missing values with 0
df_merge.fillna('0', inplace=True)  # replacing NaN with 0's
# dropping redundant columns
df_merge.drop(['Indicator Code', 'Country Code'], axis=1, inplace=True)

years = df_merge.columns[2:]
# removing wrong values final time
df_merge.replace('..', 0, inplace=True)

# Converting the data to numeric and rounding off to 2 decimals
df_merge[years] = np.abs(df_merge[years].astype('float').round(decimals=2))

# Checking of the size of the 3 datasets
df_merge.groupby(['Indicator Name'])['1960'].size().plot(kind='bar')
plt.title('Size of each group')
plt.xticks(rotation=45)
plt.show()

# Plotting the means of the 3 groups of the data over the years
figure, axes = plt.subplots(1, 2)

df_merge.groupby(['Indicator Name'])['1980'].mean().plot(
    kind='bar', ax=axes[0], color='turquoise')
axes[0].title.set_text('Mean of each group in the year 1980')

df_merge.groupby(['Indicator Name'])['2010'].mean().plot(
    kind='bar', ax=axes[1], color='red')
axes[1].title.set_text('Mean of each group in the year 2010')
# Add gap between subplots
plt.subplots_adjust(wspace=0.8)
plt.savefig('change.jpeg')
plt.show()

# creating 3 dataframes with 3 indicators by subsetting the original dataframe
df_renew = df[df['Indicator Name'] ==
              'Renewable energy consumption (% of total final energy consumption)']
df_accelec = df[df['Indicator Name'] ==
                'Access to electricity (% of population)']
df_popgrow = df[df['Indicator Name'] == 'Population growth (annual %)']

# Using describe() to get the summary statistics of the merged dataframe
print(df_merge.loc[:, '2000':'2018'].describe())


# Select only numeric columns
numeric_cols = df_merge.select_dtypes(include=np.number).columns.tolist()

# Compute skewness and kurtosis for each numeric column
for col in numeric_cols:
    skewness = skew(df_merge[col])
    kurt = kurtosis(df_merge[col])
    print(f"Column {col}: Skewness = {skewness:.2f}, Kurtosis = {kurt:.2f}")


# diving the data back to 3 datasets to perform summary statistics
df_merge_renew = df_merge[df_merge['Indicator Name'] ==
                          'Renewable energy consumption (% of total final energy consumption)']
df_merge_accelec = df_merge[df_merge['Indicator Name']
                            == 'Access to electricity (% of population)']
df_merge_popgrow = df_merge[df_merge['Indicator Name']
                            == 'Population growth (annual %)']


# saving the summary statistics in a dataframe
stats = pd.DataFrame()
stats['renew'] = df_merge_renew[years].mean(axis=0).to_frame()
stats['accelec'] = df_merge_accelec[years].mean(axis=0).to_frame()
stats['popgrow'] = df_merge_popgrow[years].mean(axis=0).to_frame()

# select columns for the years 2000 to 2018
stats = stats.loc['2000':'2018']
# scaling the data since all the groups are not in the same scale
scaler = StandardScaler()

# scaling the data using standard scaler and saving it with full column names
stats_sc = pd.DataFrame(
    scaler.fit_transform(stats),
    columns=[
        'Renewable energy consumption',
        'Access to electricity (% of population)',
        'Population growth (annual %)'])

stats_sc.index = stats.index  # setting the index

Haiti = df_merge[df_merge['Country Name'] == 'Haiti']
Haiti = Haiti.drop(['Country Name'], axis=1)
Haiti = Haiti.set_index('Indicator Name').loc[:, '2000':'2018'].T

Greece = df_merge[df_merge['Country Name'] == 'Greece']
Greece = Greece.drop(['Country Name'], axis=1)
Greece = Greece.set_index('Indicator Name').loc[:, '2000':'2018'].T


def plot_country(data, name):
    plt.figure(figsize=(6, 6))
    for i in data.columns:
        # Select only the data for the years 2000 to 2018
        data_range = data.loc['2000':'2018', [i]]

        scaler = StandardScaler()
        # scaling the data using standard scaler and saving it with full column
        # names
        country_sc = pd.DataFrame(
            scaler.fit_transform(data_range), columns=[i])
        country_sc.index = data_range.index
        plt.plot(
            country_sc.index,
            country_sc[i],
            label=i)  # plotting the line
        plt.legend(loc='best')  # setting the location of the legends
        plt.xticks(country_sc.index, rotation=45)  # changing the x axis values
        plt.ylabel('Relative Change')  # setting y axis label
    plt.title(
        'Change of Indicators over the years in %s' %
        name)  # setting the title
    plt.show()


plot_country(Haiti, 'Haiti')
plot_country(Greece, 'Greece')

def heatmap_china(x):
    """
    A function that creates a heatmap of the correlation matrix between different indicators for Afghanistan.

    Args:
    x (pandas.DataFrame): A DataFrame containing data on different indicators for various countries.

    Returns:
    This function plots the heatmap ."""

    # Specify the indicators to be used in the heatmap
    indicator = ['Nitrous oxide emissions (% change from 1990)',
                 'CO2 emissions from liquid fuel consumption (% of total)',
                 'Population growth (annual %)',
                 'Agricultural land (% of land area)',
                 'Forest area (% of land area)']

    # Filter the data to keep only Afghanistan's data and the specified indicators
    chi = x.loc[x['Country Name'] == 'China']
    China = chi[chi['Indicator Name'].isin(indicator)]

    # Pivot the data to create a DataFrame with each indicator as a column
    China_df = China.pivot_table(
        China, columns=x['Indicator Name'])
    # Compute the correlation matrix for the DataFrame
    China_df.corr()
    # Plot the heatmap using seaborn
    plt.figure(figsize=(12, 8))
    sns.heatmap(China_df.corr(), fmt='.2g',
                annot=True, cmap='magma', linecolor='black')
    plt.title('India', fontsize=15, fontweight='bold')
    plt.xlabel('')
    plt.ylabel('')
    plt.savefig('heatmap_china.png')
    plt.show()


# In[23]:


heatmap_china(df)

import seaborn as sns

